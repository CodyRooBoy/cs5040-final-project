import pyvista as pv
import numpy as np

# Note: Code was partially generated by AI for clarity and making sure code was correct

# Load the dataset and define grid dimensions
mesh = pv.read("beads2d.vti")
xdim, ydim, tdim = 128, 128, 512

# Reshape the velocity arrays using Fortran ordering
u_all = mesh.point_data["u"].reshape((xdim, ydim, tdim), order='F')
v_all = mesh.point_data["v"].reshape((xdim, ydim, tdim), order='F')

# Create spatial grid over the domain [-2, 2] for x and y
x = np.linspace(-2, 2, xdim)
y = np.linspace(-2, 2, ydim)
xx, yy = np.meshgrid(x, y, indexing='ij')
x_coords = xx.ravel(order='F')
y_coords = yy.ravel(order='F')

# Compute the true vortex coreline from the simulation data.
# For each time slice, identify the point where the speed is minimal.
true_coreline_points = []
for ti in range(tdim):
    u_slice = u_all[:, :, ti].flatten(order='F')
    v_slice = v_all[:, :, ti].flatten(order='F')
    speed = np.sqrt(u_slice**2 + v_slice**2)
    min_index = np.argmin(speed)
    center_x = x_coords[min_index]
    center_y = y_coords[min_index]
    physical_time = (ti / (tdim - 1)) * (2 * np.pi)
    true_coreline_points.append([center_x, center_y, physical_time])

true_coreline_points = np.array(true_coreline_points)

# Compute the fixed coreline: assume vortex center is always (0, 0)
fixed_coreline_points = []
for ti in range(tdim):
    physical_time = (ti / (tdim - 1)) * (2 * np.pi)
    fixed_coreline_points.append([0.0, 0.0, physical_time])
fixed_coreline_points = np.array(fixed_coreline_points)

# Helper function to build a polyline from a set of points
def create_polyline(points):
    poly = pv.PolyData(points)
    n_points = points.shape[0]
    cells = np.hstack([[n_points], np.arange(n_points)])
    poly.lines = cells
    return poly

true_coreline_poly = create_polyline(true_coreline_points)
fixed_coreline_poly = create_polyline(fixed_coreline_points)

# Visualize both corelines: blue = true coreline, green = fixed coreline
plotter = pv.Plotter()
plotter.add_mesh(true_coreline_poly, color='blue', line_width=3, label="True Coreline")
plotter.add_mesh(fixed_coreline_poly, color='green', line_width=3, label="Fixed Coreline")
plotter.add_legend()
plotter.show()
