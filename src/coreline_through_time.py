import pyvista as pv
import numpy as np

# note: code was partially generated by AI for clarity and making sure code was correct.

# Load data and set up grid dimensions
mesh = pv.read("beads2d.vti")
xdim, ydim, tdim = 128, 128, 512

u_all = mesh.point_data["u"].reshape((xdim, ydim, tdim), order='F')
v_all = mesh.point_data["v"].reshape((xdim, ydim, tdim), order='F')

x = np.linspace(-2, 2, xdim)
y = np.linspace(-2, 2, ydim)
xx, yy = np.meshgrid(x, y, indexing='ij')
zz = np.zeros_like(xx)

grid = pv.StructuredGrid()
grid.points = np.c_[xx.ravel(order='F'), yy.ravel(order='F'), zz.ravel(order='F')]
grid.dimensions = (xdim, ydim, 1)

# Update the grid's vector field for a given time slice and compute the vortex center (min speed)
def update_grid(t_index):
    u = u_all[:, :, t_index].flatten(order='F')
    v = v_all[:, :, t_index].flatten(order='F')
    
    vectors = np.column_stack((u, v, np.zeros_like(u)))
    grid["vectors"] = vectors
    grid.set_active_vectors("vectors")
    speed = np.sqrt(u**2 + v**2)
    grid["speed"] = speed
    min_index = np.argmin(speed)

    x_coords = xx.ravel(order='F')
    y_coords = yy.ravel(order='F')

    return (x_coords[min_index], y_coords[min_index])

# Create seed points for streamlines on the z=0 plane
seed_sphere = pv.Sphere(radius=0.5, center=(0, 0, 0))
seed_points = seed_sphere.points[:100]
seed_points[:, 2] = 0

source = pv.PolyData()
source.points = seed_points

# Compute streamlines for the current grid state
def get_streamlines():
    return grid.streamlines_from_source(source, vectors="vectors", integration_direction="both")

streamlines_actor = None
vortex_center_actor = None
plotter = pv.Plotter()

# Slider callback that updates the current time slice, streamlines, and vortex center
def slider_callback(val):
    global streamlines_actor, vortex_center_actor
    t_index = int(val)
    vc = update_grid(t_index)
    new_sl = get_streamlines()

    if streamlines_actor is None:
        streamlines_actor = plotter.add_mesh(new_sl, color='blue', reset_camera=False)

    else:
        streamlines_actor.mapper.SetInputData(new_sl)
    sphere_vc = pv.Sphere(radius=0.01, center=(vc[0], vc[1], 0))

    if vortex_center_actor is None:
        vortex_center_actor = plotter.add_mesh(sphere_vc, color='red', reset_camera=False)

    else:
        vortex_center_actor.mapper.SetInputData(sphere_vc)
    plotter.render()

# Add the slider widget without the value_format parameter
plotter.add_slider_widget(slider_callback, [0, tdim - 1], value=0, title="Time")
slider_callback(0)
plotter.show()
